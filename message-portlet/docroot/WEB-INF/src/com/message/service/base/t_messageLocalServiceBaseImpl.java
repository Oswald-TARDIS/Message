/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.message.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.message.model.t_message;

import com.message.service.persistence.t_messagePersistence;
import com.message.service.persistence.t_studentPersistence;
import com.message.service.persistence.t_teacherPersistence;
import com.message.service.t_messageLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the t_message local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.message.service.impl.t_messageLocalServiceImpl}.
 * </p>
 *
 * @author mazhe
 * @see com.message.service.impl.t_messageLocalServiceImpl
 * @see com.message.service.t_messageLocalServiceUtil
 * @generated
 */
public abstract class t_messageLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements t_messageLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.message.service.t_messageLocalServiceUtil} to access the t_message local service.
	 */

	/**
	 * Adds the t_message to the database. Also notifies the appropriate model listeners.
	 *
	 * @param t_message the t_message
	 * @return the t_message that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public t_message addt_message(t_message t_message)
		throws SystemException {
		t_message.setNew(true);

		return t_messagePersistence.update(t_message);
	}

	/**
	 * Creates a new t_message with the primary key. Does not add the t_message to the database.
	 *
	 * @param messageId the primary key for the new t_message
	 * @return the new t_message
	 */
	@Override
	public t_message createt_message(long messageId) {
		return t_messagePersistence.create(messageId);
	}

	/**
	 * Deletes the t_message with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param messageId the primary key of the t_message
	 * @return the t_message that was removed
	 * @throws PortalException if a t_message with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public t_message deletet_message(long messageId)
		throws PortalException, SystemException {
		return t_messagePersistence.remove(messageId);
	}

	/**
	 * Deletes the t_message from the database. Also notifies the appropriate model listeners.
	 *
	 * @param t_message the t_message
	 * @return the t_message that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public t_message deletet_message(t_message t_message)
		throws SystemException {
		return t_messagePersistence.remove(t_message);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(t_message.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return t_messagePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.message.model.impl.t_messageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return t_messagePersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.message.model.impl.t_messageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return t_messagePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return t_messagePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return t_messagePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public t_message fetcht_message(long messageId) throws SystemException {
		return t_messagePersistence.fetchByPrimaryKey(messageId);
	}

	/**
	 * Returns the t_message with the primary key.
	 *
	 * @param messageId the primary key of the t_message
	 * @return the t_message
	 * @throws PortalException if a t_message with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public t_message gett_message(long messageId)
		throws PortalException, SystemException {
		return t_messagePersistence.findByPrimaryKey(messageId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return t_messagePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the t_messages.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.message.model.impl.t_messageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of t_messages
	 * @param end the upper bound of the range of t_messages (not inclusive)
	 * @return the range of t_messages
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<t_message> gett_messages(int start, int end)
		throws SystemException {
		return t_messagePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of t_messages.
	 *
	 * @return the number of t_messages
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int gett_messagesCount() throws SystemException {
		return t_messagePersistence.countAll();
	}

	/**
	 * Updates the t_message in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param t_message the t_message
	 * @return the t_message that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public t_message updatet_message(t_message t_message)
		throws SystemException {
		return t_messagePersistence.update(t_message);
	}

	/**
	 * Returns the t_message local service.
	 *
	 * @return the t_message local service
	 */
	public com.message.service.t_messageLocalService gett_messageLocalService() {
		return t_messageLocalService;
	}

	/**
	 * Sets the t_message local service.
	 *
	 * @param t_messageLocalService the t_message local service
	 */
	public void sett_messageLocalService(
		com.message.service.t_messageLocalService t_messageLocalService) {
		this.t_messageLocalService = t_messageLocalService;
	}

	/**
	 * Returns the t_message remote service.
	 *
	 * @return the t_message remote service
	 */
	public com.message.service.t_messageService gett_messageService() {
		return t_messageService;
	}

	/**
	 * Sets the t_message remote service.
	 *
	 * @param t_messageService the t_message remote service
	 */
	public void sett_messageService(
		com.message.service.t_messageService t_messageService) {
		this.t_messageService = t_messageService;
	}

	/**
	 * Returns the t_message persistence.
	 *
	 * @return the t_message persistence
	 */
	public t_messagePersistence gett_messagePersistence() {
		return t_messagePersistence;
	}

	/**
	 * Sets the t_message persistence.
	 *
	 * @param t_messagePersistence the t_message persistence
	 */
	public void sett_messagePersistence(
		t_messagePersistence t_messagePersistence) {
		this.t_messagePersistence = t_messagePersistence;
	}

	/**
	 * Returns the t_student local service.
	 *
	 * @return the t_student local service
	 */
	public com.message.service.t_studentLocalService gett_studentLocalService() {
		return t_studentLocalService;
	}

	/**
	 * Sets the t_student local service.
	 *
	 * @param t_studentLocalService the t_student local service
	 */
	public void sett_studentLocalService(
		com.message.service.t_studentLocalService t_studentLocalService) {
		this.t_studentLocalService = t_studentLocalService;
	}

	/**
	 * Returns the t_student remote service.
	 *
	 * @return the t_student remote service
	 */
	public com.message.service.t_studentService gett_studentService() {
		return t_studentService;
	}

	/**
	 * Sets the t_student remote service.
	 *
	 * @param t_studentService the t_student remote service
	 */
	public void sett_studentService(
		com.message.service.t_studentService t_studentService) {
		this.t_studentService = t_studentService;
	}

	/**
	 * Returns the t_student persistence.
	 *
	 * @return the t_student persistence
	 */
	public t_studentPersistence gett_studentPersistence() {
		return t_studentPersistence;
	}

	/**
	 * Sets the t_student persistence.
	 *
	 * @param t_studentPersistence the t_student persistence
	 */
	public void sett_studentPersistence(
		t_studentPersistence t_studentPersistence) {
		this.t_studentPersistence = t_studentPersistence;
	}

	/**
	 * Returns the t_teacher local service.
	 *
	 * @return the t_teacher local service
	 */
	public com.message.service.t_teacherLocalService gett_teacherLocalService() {
		return t_teacherLocalService;
	}

	/**
	 * Sets the t_teacher local service.
	 *
	 * @param t_teacherLocalService the t_teacher local service
	 */
	public void sett_teacherLocalService(
		com.message.service.t_teacherLocalService t_teacherLocalService) {
		this.t_teacherLocalService = t_teacherLocalService;
	}

	/**
	 * Returns the t_teacher remote service.
	 *
	 * @return the t_teacher remote service
	 */
	public com.message.service.t_teacherService gett_teacherService() {
		return t_teacherService;
	}

	/**
	 * Sets the t_teacher remote service.
	 *
	 * @param t_teacherService the t_teacher remote service
	 */
	public void sett_teacherService(
		com.message.service.t_teacherService t_teacherService) {
		this.t_teacherService = t_teacherService;
	}

	/**
	 * Returns the t_teacher persistence.
	 *
	 * @return the t_teacher persistence
	 */
	public t_teacherPersistence gett_teacherPersistence() {
		return t_teacherPersistence;
	}

	/**
	 * Sets the t_teacher persistence.
	 *
	 * @param t_teacherPersistence the t_teacher persistence
	 */
	public void sett_teacherPersistence(
		t_teacherPersistence t_teacherPersistence) {
		this.t_teacherPersistence = t_teacherPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.message.model.t_message",
			t_messageLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.message.model.t_message");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return t_message.class;
	}

	protected String getModelClassName() {
		return t_message.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = t_messagePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.message.service.t_messageLocalService.class)
	protected com.message.service.t_messageLocalService t_messageLocalService;
	@BeanReference(type = com.message.service.t_messageService.class)
	protected com.message.service.t_messageService t_messageService;
	@BeanReference(type = t_messagePersistence.class)
	protected t_messagePersistence t_messagePersistence;
	@BeanReference(type = com.message.service.t_studentLocalService.class)
	protected com.message.service.t_studentLocalService t_studentLocalService;
	@BeanReference(type = com.message.service.t_studentService.class)
	protected com.message.service.t_studentService t_studentService;
	@BeanReference(type = t_studentPersistence.class)
	protected t_studentPersistence t_studentPersistence;
	@BeanReference(type = com.message.service.t_teacherLocalService.class)
	protected com.message.service.t_teacherLocalService t_teacherLocalService;
	@BeanReference(type = com.message.service.t_teacherService.class)
	protected com.message.service.t_teacherService t_teacherService;
	@BeanReference(type = t_teacherPersistence.class)
	protected t_teacherPersistence t_teacherPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private t_messageLocalServiceClpInvoker _clpInvoker = new t_messageLocalServiceClpInvoker();
}